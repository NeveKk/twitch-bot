// Native
import path from 'path';

// Packages
import { BrowserWindow, app, ipcMain, screen, session } from 'electron';
import isDev from 'electron-is-dev';
import Store from 'electron-store';

const storeConfig = { name: 'settings', fileExtension: 'db' };
const db = new Store(storeConfig);

interface SettingsProps {
    x: number;
    y: number;
    width: number;
    heigth: number;
}
const height = 600;
const width = 800;
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
// eslint-disable-next-line global-require
if (require('electron-squirrel-startup')) {
    app.quit();
}

const createWindow = (): void => {
    const screenSize = screen.getPrimaryDisplay().workAreaSize;
    if (!db.has('window')) {
        db.set('window', {
            x: screenSize.width / 2 - 400,
            y: screenSize.height / 2 - 300,
            width,
            height
        });
    }

    const windowSettings = db.get('window') as SettingsProps;
    // Create the browser window.
    const mainWindow = new BrowserWindow({
        width: windowSettings.width,
        height: windowSettings.heigth,
        x: windowSettings.x,
        y: windowSettings.y,
        frame: false,
        show: true,
        resizable: true,
        fullscreenable: true,
        webPreferences: {
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY
        }
    });

    session.defaultSession.protocol.registerFileProtocol('static', (request, callback) => {
        const fileUrl = request.url.replace('static://', '');
        const filePath = path.join(app.getAppPath(), '.webpack/renderer', fileUrl);
        callback(filePath);
    });

    // and load the index.html of the app.
    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

    // Open the DevTools.
    if (isDev) mainWindow.webContents.openDevTools();

    // For AppBar
    ipcMain.on('minimize', () => {
        // eslint-disable-next-line no-unused-expressions
        mainWindow.isMinimized() ? mainWindow.restore() : mainWindow.minimize();
        // or alternatively: win.isVisible() ? win.hide() : win.show()
    });
    ipcMain.on('maximize', () => {
        // eslint-disable-next-line no-unused-expressions
        mainWindow.isMaximized() ? mainWindow.restore() : mainWindow.maximize();
    });

    ipcMain.on('close', () => {
        const bounds = mainWindow.getBounds();
        db.set('window', {
            x: bounds.x,
            y: bounds.y,
            width: bounds.width,
            height: bounds.height
        });

        app.quit();
    });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
        app.quit();
    }
});

app.on('activate', () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
        createWindow();
    }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
